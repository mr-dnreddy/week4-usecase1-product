------------------------------------------------------------------------------------------------------------
package com.wipro.dn.product.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.wipro.dn.product.dto.ProductDTO;
import com.wipro.dn.product.service.ProductService;

@RestController
@RequestMapping("/product")
public class ProductController {

    @Autowired
    private ProductService productService;

    @PostMapping
    public ResponseEntity<ProductDTO> saveProduct(@RequestBody ProductDTO productDTO) {
        return ResponseEntity.ok(productService.saveProduct(productDTO));
    }

    @GetMapping
    public ResponseEntity<List<ProductDTO>> getAllProducts() {
        return ResponseEntity.ok(productService.getAllProducts());
    }

    @GetMapping("/{id}")
    public ResponseEntity<ProductDTO> getProductById(@PathVariable int id) {
        return productService.getProductById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteProductById(@PathVariable int id) {
        productService.deleteProductById(id);
        return ResponseEntity.noContent().build();
    }

    @PutMapping
    public ResponseEntity<ProductDTO> updateProduct(@RequestBody ProductDTO productDTO) {
        return ResponseEntity.ok(productService.updateProduct(productDTO));
    }
}
------------------------------------------------------------------------------------------------------------
package com.wipro.dn.product.dto;

public class ProductDTO {
    private int id;
    private String description;
    private String category;
    private int qty;
    private double price;

    // Default constructor
    public ProductDTO() {
    }

    // Parameterized constructor
    public ProductDTO(int id, String description, String category, int qty, double price) {
        this.id = id;
        this.description = description;
        this.category = category;
        this.qty = qty;
        this.price = price;
    }

    // Getters and Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public int getQty() {
        return qty;
    }

    public void setQty(int qty) {
        this.qty = qty;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}
---------------------------------------------------------------------------------
package com.wipro.dn.product.entity;


import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "products")
public class Product {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    
    private String description;
    private String category;
    private int qty;
    private double price;

    // Default constructor
    public Product() {
    }

    // Parameterized constructor
    public Product(String description, String category, int qty, double price) {
        this.description = description;
        this.category = category;
        this.qty = qty;
        this.price = price;
    }

    // Getters and Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public int getQty() {
        return qty;
    }

    public void setQty(int qty) {
        this.qty = qty;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    // Override toString method for debugging
    @Override
    public String toString() {
        return "Product{" +
                "id=" + id +
                ", description='" + description + '\'' +
                ", category='" + category + '\'' +
                ", qty=" + qty +
                ", price=" + price +
                '}';
    }
}
--------------------------------------------------------------------------
package com.wipro.dn.product.productrepo;

import org.springframework.data.jpa.repository.JpaRepository;

import com.wipro.dn.product.entity.Product;

public interface ProductRepository extends JpaRepository<Product, Integer> {
	
}
--------------------------------------------------------------------------

package com.wipro.dn.product.service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.wipro.dn.product.dto.ProductDTO;
import com.wipro.dn.product.entity.Product;
import com.wipro.dn.product.productrepo.ProductRepository;

@Service
public class ProductService {

    @Autowired
    private ProductRepository productRepository;

    public ProductDTO saveProduct(ProductDTO productDTO) {
        Product product = new Product(
                productDTO.getDescription(),
                productDTO.getCategory(),
                productDTO.getQty(),
                productDTO.getPrice()
        );
        Product savedProduct = productRepository.save(product);
        return convertToDTO(savedProduct);
    }

    public List<ProductDTO> getAllProducts() {
        return productRepository.findAll().stream()
                .map(this::convertToDTO)
                .collect(Collectors.toList());
    }

    public Optional<ProductDTO> getProductById(int id) {
        return productRepository.findById(id)
                .map(this::convertToDTO);
    }

    public void deleteProductById(int id) {
        productRepository.deleteById(id);
    }

    public ProductDTO updateProduct(ProductDTO productDTO) {
        Product product = new Product(
                productDTO.getDescription(),
                productDTO.getCategory(),
                productDTO.getQty(),
                productDTO.getPrice()
        );
        product.setId(productDTO.getId()); // Ensure the ID is set for updating
        Product updatedProduct = productRepository.save(product);
        return convertToDTO(updatedProduct);
    }

    private ProductDTO convertToDTO(Product product) {
        return new ProductDTO(
                product.getId(),
                product.getDescription(),
                product.getCategory(),
                product.getQty(),
                product.getPrice()
        );
    }
}


--------------------------------------------------------------------------

CREATE DATABASE productdb;

USE productdb;

CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    description VARCHAR(255) NOT NULL,
    category VARCHAR(255) NOT NULL,
    qty INT NOT NULL,
    price DOUBLE NOT NULL
);


INSERT INTO products (description, category, qty, price) VALUES
('Smartphone', 'Electronics', 50, 299.99),
('Laptop', 'Electronics', 30, 999.99),
('T-Shirt', 'Apparel', 100, 19.99),
('Jeans', 'Apparel', 60, 39.99),
('Refrigerator', 'Home Appliances', 20, 499.99),
('Microwave', 'Home Appliances', 25, 89.99),
('Washing Machine', 'Home Appliances', 10, 699.99),
('Headphones', 'Electronics', 75, 49.99),
('Sneakers', 'Apparel', 40, 59.99),
('Book', 'Books', 200, 12.99);

select * from products

--------------------------------------------------------------------------

spring.application.name=week4-usecase-1-product
server.port=9010
spring.datasource.url=jdbc:mysql://localhost:3306/productdb
spring.datasource.username=root
spring.datasource.password=Jambalakadijm@43
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
